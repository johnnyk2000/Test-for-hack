#include "BluetoothSerial.h"

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)           //error catching
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT; //Bluetooth Connection

#define SPEED 19
#define FORWARD 18
#define BACKWARD 5
#define SRIGHT 14
#define FRIGHT 32
#define BRIGHT 15
//added code from robotarms.ino
static const int leftArmPin = 14;
static const int rightArmPin = 32;

//Also added
Servo_ESP32 leftArm;
Servo_ESP32 rightArm;

int leftServoAngle =90;
int leftServo1AngleMin =0;
int leftServo1AngleMax = 180;

void setup() 
{
  pinMode(SPEED, OUTPUT);
  pinMode(FORWARD, OUTPUT);
  pinMode(BACKWARD, OUTPUT);
  pinMode(SRIGHT, OUTPUT);
  pinMode(FRIGHT, OUTPUT);
  pinMode(BRIGHT, OUTPUT);
  
  
  
  Serial.begin(115200);
  SerialBT.begin("ESP_TMM_1"); //Bluetooth name is ESP_TMM
  Serial.println("Started successfully.");
  
  //Added
  SerialBT.begin("Maniac arms");
  Serial.println("Started successfully.");

  digitalWrite(SPEED, LOW);
  digitalWrite(FORWARD, LOW);
  digitalWrite(BACKWARD, LOW);
  digitalWrite(SRIGHT, LOW);
  digitalWrite(FRIGHT, LOW);
  digitalWrite(BRIGHT, LOW);
  
  //Added
  leftArm.attach(leftArmPin);
  rightArm.attach(rightArmPin);
}

char readIn;

void loop() 
{
  if (SerialBT.available()) //if there are bytes available in the buffer
  {
    readIn = char(SerialBT.read()); //read in one and store it in readIn
  }

  if (readIn == 'w') 
  {
    //digitalWrite(SPEED, 100);
    digitalWrite(FORWARD, HIGH);
    digitalWrite(BACKWARD, LOW);
    //digitalWrite(SRIGHT, 100);
    digitalWrite(FRIGHT, HIGH);
    digitalWrite(BRIGHT, LOW);
    SerialBT.println("going forward!");
  }
  else if (readIn == 's'){
    //digitalWrite(SPEED, 100);
    digitalWrite(FORWARD, LOW);
    digitalWrite(BACKWARD, HIGH);
    //digitalWrite(SRIGHT, 100);
    digitalWrite(FRIGHT, LOW);
    digitalWrite(BRIGHT, HIGH);
    SerialBT.println("going backward");
  }
  else if (readIn == 'x'){
    //digitalWrite(SPEED, 0);
    digitalWrite(FORWARD, LOW);
    digitalWrite(BACKWARD, LOW);
    //digitalWrite(SRIGHT, 0);
    digitalWrite(FRIGHT, LOW);
    digitalWrite(BRIGHT, LOW);
    SerialBT.println("STOP");
  }
    else if (readIn == 'a'){
    //digitalWrite(SPEED, 0);
    digitalWrite(FORWARD, LOW);
    digitalWrite(BACKWARD, LOW);
    //digitalWrite(SRIGHT, 50);
    digitalWrite(FRIGHT, HIGH);
    digitalWrite(BRIGHT, LOW);
    SerialBT.println("TURN LEFT");
  }
    else if (readIn == 'd'){
    //digitalWrite(SPEED, 50);
    digitalWrite(FORWARD, HIGH);
    digitalWrite(BACKWARD, LOW);
    //digitalWrite(SRIGHT, 0);
    digitalWrite(FRIGHT, LOW);
    digitalWrite(BRIGHT, LOW);
    SerialBT.println("TURN RIGHT");
  }
  
  //added code from robotarms.ino
  //changed readPos to readIn
  
    else if (readIn == 'o') {
    rightArm.write(leftServo1AngleMin);
    leftArm.write(leftServo1AngleMin);
    Serial.println("Neutral Position");
  }
    else if (readIn == 'p') {
    rightArm.write(leftServo1AngleMax);
    leftArm.write(leftServo1AngleMax);
    Serial.println("Lifted Position");
    
  delay(20);

}
