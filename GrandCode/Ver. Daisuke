//Arduino IDE code for ESP 32 
// COMBIMED code for: MOTOR, UART(LCD), ARMS, and DANCE

#include "BluetoothSerial.h"
#include <Servo_ESP32.h>  //library for arms(servo)

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)           //error catching
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT; //Bluetooth Connection

//#define SPEED 19   //SPEED is unnecessary to run it
#define FORWARD 18   //left wheels
#define BACKWARD 5   //left wheels
// #define SRIGHT 14 //SPEED is unnecessary to run it
#define FRIGHT 32    //Right wheels
#define BRIGHT 15    //Right wheels

static const int leftArmPin = 14;
static const int rightArmPin = 33;

Servo_ESP32 leftArm;
Servo_ESP32 rightArm;

int leftServoAngle =90;
int leftServo1AngleMin =0;
int leftServo1AngleMax = 180;

void setup() 
{
  //pinMode(SPEED, OUTPUT);
  pinMode(FORWARD, OUTPUT);
  pinMode(BACKWARD, OUTPUT);
  //pinMode(SRIGHT, OUTPUT);
  pinMode(FRIGHT, OUTPUT);
  pinMode(BRIGHT, OUTPUT);
  
  
  Serial.begin(115200);
  Serial2.begin(115200);       //UART connect to Arduino Uno
  SerialBT.begin("ESP_TMM_1"); //Bluetooth name is ESP_TMM
  Serial.println("Started successfully.");
  

  //digitalWrite(SPEED, LOW);
  digitalWrite(FORWARD, LOW);
  digitalWrite(BACKWARD, LOW);
  //digitalWrite(SRIGHT, LOW);
  digitalWrite(FRIGHT, LOW);
  digitalWrite(BRIGHT, LOW);

  leftArm.attach(leftArmPin);
  rightArm.attach(rightArmPin);
  
}

char readIn;
char readPos;

void loop() 
{
  //initialize LCD screen with rest sequence animation
  Serial2.print('r');             //Sends char 'r' to Arduino via UART
  if (SerialBT.available()) //if there are bytes available in the buffer
  {
    readIn = char(SerialBT.read());
    readPos = char(SerialBT.read());//read in one and store it in readIn
  }

  if (readIn == 'w') 
  {
      Forward();
  }
  else if (readIn == 's')
  {
      Backward();
  }
  else if (readIn == 'x')
  {
      Stop();
  }
  else if (readIn == 'a')
  {
      TurnLeft();
  }
  else if (readIn == 'd')
  {
      TurnRight();
  }
  else if (readIn == 'o')
  {
      Neutral();
  }
  else if (readIn == 'p')
  {
      Lift();
  }
  else if (readIn == 't') //dance at 58bpm
  {
        Serial2.print('b');             //Sends char 'b' to Arduino via UART
        TurnLeft();
        delay(1034);
        TurnRight();  
        delay(1034);
        TurnLeft();
        delay(1034);
        TurnRight();  
        delay(1034);
//        Backward();
//        delay(1034);   // when Backward is included the program crashes. 
        Forward();
        delay(1034);
        Lift();
        delay(1034);
        Neutral();
        delay(1034);
        Lift();
        delay(1034);
        Neutral();
        delay(1034);
        Stop();   
   } 
   /*else 
   {
    Stop();
    SerialBT.println("ERRORRRR");
   } */
    
  delay(100);

}

void Forward()
{
    Serial2.print('m');             //Sends char 'm' to Arduino via UART
    //digitalWrite(SPEED, 100);
    digitalWrite(FORWARD, HIGH);
    digitalWrite(BACKWARD, LOW);
    //digitalWrite(SRIGHT, 100);
    digitalWrite(FRIGHT, HIGH);
    digitalWrite(BRIGHT, LOW);
    SerialBT.println("going forward!");
}

void Backward()
{
    Serial2.print('m');             //Sends char 'm' to Arduino via UART
    //digitalWrite(SPEED, 100);
    digitalWrite(FORWARD, LOW);
    digitalWrite(BACKWARD, HIGH);
    //digitalWrite(SRIGHT, 100);
    digitalWrite(FRIGHT, LOW);
    digitalWrite(BRIGHT, HIGH);
    SerialBT.println("going backward");
}

void Stop()
{
    Serial2.print('r');             //Sends char 'r' to Arduino via UART
    //digitalWrite(SPEED, 0);
    digitalWrite(FORWARD, LOW);
    digitalWrite(BACKWARD, LOW);
    //digitalWrite(SRIGHT, 0);
    digitalWrite(FRIGHT, LOW);
    digitalWrite(BRIGHT, LOW);
    SerialBT.println("STOP");
}

void TurnLeft()
{
    Serial2.print('f');             //Sends char 'f' to Arduino via UART
    //digitalWrite(SPEED, 0);
    digitalWrite(FORWARD, LOW);
    digitalWrite(BACKWARD, LOW);
    //digitalWrite(SRIGHT, 50);
    digitalWrite(FRIGHT, HIGH);
    digitalWrite(BRIGHT, LOW);
    SerialBT.println("TURN LEFT");
}

void TurnRight()
{
    Serial2.print('g');             //Sends char 'm' to Arduino via UART
    //digitalWrite(SPEED, 50);
    digitalWrite(FORWARD, HIGH);
    digitalWrite(BACKWARD, LOW);
    //digitalWrite(SRIGHT, 0);
    digitalWrite(FRIGHT, LOW);
    digitalWrite(BRIGHT, LOW);
    SerialBT.println("TURN RIGHT");
}

void Neutral()
{
    Serial2.print('v');             //Sends char 'v' to Arduino via UART
   rightArm.write(leftServo1AngleMin);
   leftArm.write(leftServo1AngleMin);
   Serial.println("Neutral Position");
}

void Lift()  //to life arm 180 degrees
{
    Serial2.print('v');             //Sends char 'v' to Arduino via UART
    rightArm.write(leftServo1AngleMax);
    leftArm.write(leftServo1AngleMax);
    Serial.println("Lifted Position");
}




// PROCESSING CODE





import processing.serial.*;  //imports library used for wireless comm with the HC-05
Serial myPort;               // declares Serial Port object from library
String Text = "";

void setup()
{
 size(900,1000);                         // create window of this size
 myPort=new Serial(this, "COM4", 115200);  //COM port will likely be different, try different ones until it works (usually one of COM3-COM7)
 myPort.bufferUntil('\n');               //delays calling serialEvent unitl reaching '\n'
}


void serialEvent(Serial myPort){        //serialEvent is called whenever data is available
  Text = myPort.readStringUntil('\n');   //reads Serial.println() from Arduino
}


int state = 0;
int x = 0;


void draw()
{

  background(237,240,241);        // sets background to a color, parameters correspond to an RGB code
  fill(20,160,133);               // sets color we will use to fill shapes
  stroke(33);                     // sets color used for border around shapes
  strokeWeight(1);                // sets width of stroke when drawing shapes
  
 rect(x,700,50,50,10);           //creates a rectangle at x,y with size width,height
  x+=1;
  if (x == 800)
    x=0;
    
  fill(0);
  textSize(32);
  text(Text, 400, 700);           //draws text at x,y
    
  if (state == 1) {
    myPort.write('w');            //writes to the Bluetooth Serial port
    state = 0;
  } else if (state == 2) {
    myPort.write('s');
    state = 0;
  }else if (state == 3) {
    myPort.write('a');
    state = 0;
  }else if (state == 4) {
    myPort.write('d');
    state = 0;
  }else if (state == 5) {
    myPort.write('x');
    state = 0;
  }
  else if (state == 6) {
    myPort.write('o');
    state = 0;
  }
 else if (state == 7) {
    myPort.write('p');
    state = 0;
  }
  else if (state == 8) {
    myPort.write('t');
    state = 0;
  }
}

void keyPressed() {               //called whenever a key is pressed, key is automatically set to the key that is pressed
  
  if(key == 'w')
  {
    //move forward
    state = 1;
  }
  else if (key == 's')
  {
    //move backward
    state = 2;
  }
  else if(key == 'a')
  {
    //move left
     state = 3;
  }else if(key == 'd')
  {
    //move right
     state = 4;
  }
  else if(key == 'x')
  {
    //stop the car
    state = 5;
  }
  else if(key == 'o')
  {
    //arm neutral
     state = 6;
  }
  else if(key == 'p')
  {
    //arm lift
    state = 7;
  }
  else if(key == 't')
  {
    //dance
    state = 8;
  }
  
}
